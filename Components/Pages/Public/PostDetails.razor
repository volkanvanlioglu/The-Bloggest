@page "/Posts/{id:int}"
@inject ICommentService CommentService
@inject IPostService PostService
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-9 col-xl-8">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-secondary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (post is null)
            {
                <div class="alert alert-warning">Post not found.</div>
            }
            else
            {
                <div class="card shadow-sm mb-5" style="background-color: cadetblue;">
                    <div class="card-body">
                        <article>
                            <header class="mb-3">
                                <h1 class="display-6 fw-semibold">@post.Title</h1>
                                <img src="@((!string.IsNullOrEmpty(post.CoverImageUrl) && post.CoverImageUrl.CompareTo("https://example.com/image.jpg") != 0) ? post.CoverImageUrl : "/images/no_image.png")" class="card-img img-fluid" alt="@post.Title" style="height: 200px; object-fit: cover;" />
                                <div class="text-muted">
                                    By <strong>@(authorCache.TryGetValue(post.AuthorId, out var author) ? author.UserName ?? post.AuthorId : post.AuthorId)</strong>
                                    <span class="mx-2">•</span>
                                    <span>@post.PublishedAt.ToString()</span>
                                </div>
                            </header>
                            <div class="fs-5 lh-lg">
                                <div>@((MarkupString)post.Content)</div>
                            </div>
                        </article>
                    </div>
                    <div class="card-footer">
                        <a href=@($"/Users/{post.AuthorId}")>
                            @(authorCache.TryGetValue(post.AuthorId, out var author1) ? author1.UserName ?? post.AuthorId : post.AuthorId)
                        </a>'s other posts
                    </div>
                </div>

                <section class="mt-5">
                    <h2 class="h4 mb-3">Comments</h2>

                    @if (isAuthenticated)
                    {
                        @if (commentCount > 0)
                        {
                            <div class="list-group mb-4">
                                @foreach (var c in Comments)
                                {
                                    <div class="list-group-item">
                                        <div class="d-flex justify-content-between">
                                            <strong>@c.AuthorName</strong>
                                            <span class="text-muted small">@c.CreatedAt.ToLocalTime().ToString("MMM d, yyyy h:mm tt")</span>
                                        </div>
                                        <div>@c.Content</div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-light border">No comments yet. Be the first to comment!</div>
                        }

                        <div class="card shadow-sm">
                            <div class="card-body">
                                <h3 class="h5 mb-3">Add a comment</h3>
                                <div class="row g-3">
                                    <div class="col-md-4">
                                        <input class="form-control" placeholder="Your name" @bind="newComment.AuthorName" disabled />
                                    </div>
                                    <div class="col-12">
                                        <textarea class="form-control" rows="4" placeholder="Your comment" @bind="newComment.Content"></textarea>
                                    </div>
                                    <div class="col-12">
                                        <button class="btn btn-primary" @onclick="ShowDialogAsync" disabled="@isSubmitting">
                                            @if (isSubmitting)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            }
                                            Submit Comment
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-info mt-4">
                            You must be <a href="/Account/Login">logged in</a> to comment.
                        </div>
                    }
                </section>
            }
        </div>
    </div>
</div>

<Preload LoadingText="Loading..."></Preload>
<Toasts class="p-3" Messages="messages" Delay="3000" Placement="ToastsPlacement.TopRight" />

@code {
    [Parameter] public int Id { get; set; }

    private Post? post;
    private bool isLoading = true;

    private Comment newComment = new() { AuthorName = "", Content = "" };
    private bool isSubmitting;
    private bool isAuthenticated;

    private IEnumerable<Comment>? Comments;
    private int commentCount = 0;

    // Author cache for quick lookup
    private Dictionary<string, ApplicationUser> authorCache = new();

    private ConfirmDialog dialog = default!;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    List<ToastMessage> messages = new List<ToastMessage>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ShowLoadingDataAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        post = await PostService.GetByIdAsync(Id);

        // Cache the author for this post
        if (post != null && !string.IsNullOrEmpty(post.AuthorId) && !authorCache.ContainsKey(post.AuthorId))
        {
            var author = await UserService.GetByIdAsync(Guid.Parse(post.AuthorId));
            if (author != null) authorCache[post.AuthorId] = author;
        }

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isAuthenticated = authState.User.Identity?.IsAuthenticated ?? false;

        string currentUserId;

        if (isAuthenticated)
        {
            currentUserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value ?? "";
            var commentator = await UserService.GetByIdAsync(Guid.Parse(currentUserId));

            if (commentator != null)
            {
                newComment.AuthorName = commentator.DisplayName ?? "Guest";
            }
        }

        Comments = await CommentService.GetCommentsByPostAsync(Id.ToString());
        commentCount = Comments.Count();

        isLoading = false;
    }

    private async Task SubmitCommentAsync()
    {
        if (post is null || string.IsNullOrWhiteSpace(newComment.AuthorName) || string.IsNullOrWhiteSpace(newComment.Content))
            return;

        isSubmitting = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string currentUserId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        await CommentService.CreateAsync(new Comment
        {
            AuthorName = newComment.AuthorName.Trim(),
            Content = newComment.Content.Trim(),
            CreatedAt = DateTime.UtcNow,
            PostId = post.Id,
            UserId = currentUserId
        });

        // Refresh from service to reflect latest state
        post = await PostService.GetByIdAsync(post.Id);
        newComment = new Comment();
        isSubmitting = false;
        StateHasChanged();
    }

    private async Task ShowLoadingDataAsync()
    {
        PreloadService.Show(SpinnerColor.Primary, "Loading...");
        await Task.Delay(1000);
        await SubmitCommentAsync();
        PreloadService.Hide();
    }

    private async Task ShowSavingDataAsync()
    {
        PreloadService.Show(SpinnerColor.Light, "Saving...");
        await Task.Delay(1000);
        PreloadService.Hide();
    }

    private async Task ShowDialogAsync()
    {
        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(title: "Are you sure?", message1: "Are you sure to add the comment?", confirmDialogOptions: options);

        if (confirmation) await ShowSavingDataAsync();
        else { }
    }

    private void ShowMessage(ToastType toastType, string title, string helpText, string message) => messages.Add(CreateToastMessage(toastType, title, helpText, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string title, string helpText, string message) => new ToastMessage
    {
        Type = toastType,
        Title = title,
        HelpText = helpText,
        Message = message,
    };
}