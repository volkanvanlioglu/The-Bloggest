@page "/User/Posts/List"
@using TheBloggest.Data.Models
@using TheBloggest.Interfaces
@inject IPostService PostService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>My Posts</h3>

@if (isLoading)
{
    <div class="text-center py-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p class="mt-2">Loading your posts...</p>
    </div>
}
else if (posts == null || !posts.Any())
{
    <div class="alert alert-light border text-center" role="alert">
        You have not created any posts yet.
    </div>
}
else
{
    <table class="table table-bordered table-hover">
        <thead class="table-light">
            <tr>
                <th>Title</th>
                <th>Status</th>
                <th>Created</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var post in posts)
            {
                <tr>
                    <td>@post.Title</td>
                    <td>
                        @if (post.IsPublished)
                        {
                            <span class="badge bg-success">Published</span>
                        }
                        else
                        {
                            <span class="badge bg-warning text-dark">Draft</span>
                        }
                    </td>
                    <td>@post.CreatedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => EditPost(post.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeletePostAsync(post.Id)">Delete</button>
                        <a class="btn btn-sm btn-secondary ms-2" href="@($"/Posts/{post.Id}")" target="_blank">View</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Post>? posts;
    private bool isLoading = true;
    private string? currentUserId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        currentUserId = authState.User?.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;

        if (!string.IsNullOrEmpty(currentUserId))
        {
            posts = (await PostService.GetPostsByAuthorAsync(currentUserId)).ToList();
        }
        isLoading = false;
    }

    private void EditPost(int postId)
    {
        Navigation.NavigateTo($"/User/Posts/Edit/{postId}");
    }

    private async Task DeletePostAsync(int postId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this post?");
        if (confirmed)
        {
            await PostService.DeleteAsync(postId);
            if (!string.IsNullOrEmpty(currentUserId))
            {
                posts = (await PostService.GetPostsByAuthorAsync(currentUserId)).ToList();
            }
            StateHasChanged();
        }
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
}