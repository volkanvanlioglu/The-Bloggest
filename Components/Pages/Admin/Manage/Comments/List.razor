@page "/Admin/Manage/Comments/List"
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject ICommentService CommentService
@rendermode InteractiveServer

<PageTitle>@PageTitle</PageTitle>

<h3>@PageTitle</h3>

<div class="card">
    <div class="card-body">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading Comments...</p>
            </div>
        }
        else if (allComments.Count == 0)
        {
            <div class="alert alert-light border text-center" role="alert">
                No Comments found.
            </div>
        }
        else
        {
            <Grid TItem="Comment" Class="table table-striped" Data="allComments" AllowFiltering="@true" AllowPaging="@true" PageSize="@PageSize" PageSizeSelectorVisible="true" PageSizeSelectorItems="@AvailablePageSizes" Responsive="@true">
                <GridColumns>
                    <GridColumn TItem="Comment" HeaderText="Id" PropertyName="Id">@context.Id</GridColumn>
                    <GridColumn TItem="Comment" HeaderText="Author" PropertyName="AuthorName">@context.AuthorName</GridColumn>
                    <GridColumn TItem="Comment" HeaderText="Content" PropertyName="Content">@context.Content</GridColumn>
                    <GridColumn TItem="Comment" HeaderText="Actions" Filterable="@false">
                        <button class="btn btn-warning" @onclick="() => Edit(context.Id)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteCommentAsync(context.Id)">Delete</button>
                    </GridColumn>
                </GridColumns>
            </Grid>
        }
    </div>
</div>

<ConfirmDialog @ref="dialog" />
<Toasts class="p-3" Messages="messages" Delay="3000" Placement="ToastsPlacement.TopRight" />

@code {
    string PageTitle = "Comments";
    private List<Comment> allComments = new();
    private bool isLoading = true;

    private int PageSize = 10;
    int[] AvailablePageSizes = new int[] { 10, 20, 50, 100 };

    private ConfirmDialog dialog = default!;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    List<ToastMessage> messages = new List<ToastMessage>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        allComments = await CommentService.GetAllAsync();
        isLoading = false;
    }

    private async Task DeleteCommentAsync(int CommentId)
    {
        DateTime dateTime = DateTime.UtcNow;
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this comment?");
        if (confirmed)
        {
            bool result = await CommentService.DeleteAsync(CommentId);
            await ShowSavingDataAsync();

            if (result)
            {
                ToastService.Notify(new(ToastType.Success, "bi bi-check-circle-fill", "Deleted Successfully!", dateTime.ToString(), $"Comment deleted successfully on {dateTime}", true));
                await Task.Delay(3000);
                Navigation.NavigateTo("/Admin/Manage/Comments/List");
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, "bi bi-exclamation-triangle-fill", "Error!", dateTime.ToString(), $"An error occurred during comment deletion on {dateTime}", true));
                await Task.Delay(3000);
                Console.WriteLine("Failed to delete comment");
            }
        }
    }

    private void Edit(int id) => Navigation.NavigateTo($"/Admin/Manage/Comments/Edit/{id}");

    [Inject] private IJSRuntime JS { get; set; } = default!;

    private async Task ShowSavingDataAsync()
    {
        PreloadService.Show(SpinnerColor.Light, "Deleting...");
        await Task.Delay(1000);
        PreloadService.Hide();
    }

    private void ShowMessage(ToastType toastType, string title, string helpText, string message) => messages.Add(CreateToastMessage(toastType, title, helpText, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string title, string helpText, string message) => new ToastMessage
    {
        Type = toastType,
        Title = title,
        HelpText = helpText,
        Message = message,
    };
}