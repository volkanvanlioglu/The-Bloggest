@page "/Admin/Manage/Comments/Edit/{Id:int}"
@attribute [Authorize(Roles = "Admin")]
@inject ICommentService CommentService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>@PageTitle</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>@PageTitle</h2>
                <a href="/User/Posts" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Comments
                </a>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else
            {
                <div class="row">
                    <div class="col-lg-8">
                        <div class="card">
                            <div class="card-body">
                                <EditForm Model="@comment" OnValidSubmit="ShowDialogAsync">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />

                                    <div class="mb-3">
                                        <label for="author" class="form-label">Author <span class="text-danger">*</span></label>
                                        <InputText id="author" class="form-control" @bind-Value="comment.AuthorName" placeholder="Enter comment value" disabled />
                                        <ValidationMessage For="@(() => comment.AuthorName)" />
                                    </div>

                                    <div class="mb-3">
                                        <label for="content" class="form-label">Content <span class="text-danger">*</span></label>
                                        <InputText id="content" class="form-control" @bind-Value="comment.Content" placeholder="Enter content" />
                                        <ValidationMessage For="@(() => comment.Content)" />
                                    </div>

                                    <div class="d-flex gap-2">
                                        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                                            @if (isSubmitting)
                                            {
                                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                            }
                                            Update Comment
                                        </button>
                                        <a href="/Admin/Manage/Comments/List" class="btn btn-secondary">Cancel</a>
                                    </div>
                                </EditForm>

                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<ConfirmDialog @ref="dialog" />
<Toasts class="p-3" Messages="messages" Delay="3000" Placement="ToastsPlacement.TopRight" />

@code {
    string PageTitle = "Edit Comment";

    [Parameter] public int Id { get; set; }

    private Comment? comment;
    private bool isLoading = true;
    private bool isSubmitting = false;

    private EditContext? editContext;
    private bool hasChanges = false;

    private ConfirmDialog dialog = default!;
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] protected ToastService ToastService { get; set; } = default!;
    List<ToastMessage> messages = new List<ToastMessage>();

    private void editContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        if (!hasChanges) hasChanges = true;
    }

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        comment = await CommentService.GetByIdAsync(Id);
        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        DateTime dateTime = DateTime.UtcNow;

        try
        {
            isSubmitting = true;
            var result = await CommentService.UpdateAsync(Id, comment!);

            if (result)
            {
                ToastService.Notify(new(ToastType.Success, "bi bi-check-circle-fill", "Added Successfully!", dateTime.ToString(), $"Comment updated successfully on {dateTime}", true));
                await Task.Delay(3000);
                Navigation.NavigateTo("/Admin/Manage/Comments/List");
            }
            else
            {
                ToastService.Notify(new(ToastType.Danger, "bi bi-exclamation-triangle-fill", "Error!", dateTime.ToString(), $"An error occurred during comment update on {dateTime}", true));
                await Task.Delay(3000);
                Console.WriteLine("Failed to update comment");
            }
        }
        catch (Exception ex)
        {
            ToastService.Notify(new(ToastType.Danger, "bi bi-exclamation-triangle-fill", "Error!", DateTime.UtcNow.ToString(), $"An error occurred during comment update on {DateTime.UtcNow}", true));
            await Task.Delay(3000);
            Console.WriteLine($"Error updating comment: {ex.Message}");
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task ShowSavingDataAsync()
    {
        PreloadService.Show(SpinnerColor.Light, "Saving...");
        await Task.Delay(1000);
        PreloadService.Hide();
        await HandleSubmit();
    }

    private async Task ShowDialogAsync()
    {
        var options = new ConfirmDialogOptions { IsVerticallyCentered = true };
        var confirmation = await dialog.ShowAsync(title: "Are you sure?", message1: "Are you sure to update the comment?", confirmDialogOptions: options);

        if (confirmation) await ShowSavingDataAsync();
        else { }
    }

    private void ShowMessage(ToastType toastType, string title, string helpText, string message) => messages.Add(CreateToastMessage(toastType, title, helpText, message));

    private ToastMessage CreateToastMessage(ToastType toastType, string title, string helpText, string message) => new ToastMessage
    {
        Type = toastType,
        Title = title,
        HelpText = helpText,
        Message = message,
    };
}