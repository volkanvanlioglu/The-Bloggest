@page "/Admin/Manage/Users/List"
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager Navigation
@inject IUserService IUserService
@inject UserService UserService
@rendermode InteractiveServer

<PageTitle>@PageTitle</PageTitle>

<h3>@PageTitle</h3>

<div class="card">
    <div class="card-body">
        @if (isLoading)
        {
            <div class="text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-2">Loading Users...</p>
            </div>
        }
        else if (allUsers.Count == 0)
        {
            <div class="alert alert-light border text-center" role="alert">
                No Users found.
            </div>
        }
        else
        {
            <Grid TItem="ApplicationUser" Class="table table-striped" Data="allUsers" AllowFiltering="@true" AllowPaging="@true" PageSize="@PageSize" PageSizeSelectorVisible="true" PageSizeSelectorItems="@AvailablePageSizes" Responsive="@true">
                <GridColumns>
                    <GridColumn TItem="ApplicationUser" HeaderText="Id" PropertyName="Id">@context.Id</GridColumn>
                    <GridColumn TItem="ApplicationUser" HeaderText="User Name" PropertyName="UserName">@context.UserName</GridColumn>
                    <GridColumn TItem="ApplicationUser" HeaderText="Actions" Filterable="@false">
                        <button class="btn btn-warning" @onclick="() => Details(Guid.Parse(context.Id))">Details</button>
                        <button class="btn btn-danger" @onclick="() => DeleteUserAsync(Guid.Parse(context.Id))">Delete</button>
                    </GridColumn>
                </GridColumns>
            </Grid>
        }
    </div>
</div>

@code {
    string PageTitle = "Users";
    private List<ApplicationUser> allUsers = new();
    private bool isLoading = true;

    private int PageSize = 20;
    int[] AvailablePageSizes = new int[] { 10, 20, 50, 100 };

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        allUsers = await UserService.GetAllAsync();
        isLoading = false;
    }

    private async Task DeleteUserAsync(Guid UserId)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            await UserService.DeleteAsync(UserId);
            allUsers = await UserService.GetAllAsync();
        }
    }

    private void Details(Guid id) => Navigation.NavigateTo($"/Users/{id}");

    [Inject] private IJSRuntime JS { get; set; } = default!;
}